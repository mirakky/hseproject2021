from telethon import TelegramClient, sync, events
from telethon.tl.functions.channels import GetMessagesRequest
import unittest
import time

# Your API ID, hash and session string here
api_id = int('')
api_hash = ""
client = TelegramClient('', api_id, api_hash)
client.start()


class TG_test(unittest.TestCase):
    def testStart(self):
        try:
            client.send_message('@calories_counter_bot', '/start')
            time.sleep(2)
            for message in client.get_messages('@calories_counter_bot'):
                m = message.message
            text = "–°–∫–∞–∂–∏, –∫–∞–∫—É—é –ø—Ä–µ—Å–ª–µ–¥—É–µ—à—å —Ü–µ–ª—å?"
            self.assertEqual(m, text)
        except:
            self.assertFalse(True)
    def test_2(self):
        try:
            client.send_message('@calories_counter_bot', '–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç')
            time.sleep(2)
            for message in client.get_messages('@calories_counter_bot'):
                m = message.message
            text = '"–í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, "–ê–≤–æ–∫–∞–¥–æ":"'
            self.assertEqual(m, text)
        except:
            self.assertFalse(True)
    def test_3(self):
        try:
            client.send_message('@calories_counter_bot', '–£–∑–Ω–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π üçî')
            time.sleep(2)
            for message in client.get_messages('@calories_counter_bot'):
                m = message.message
            text = "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –í–µ—Å, –†–æ—Å—Ç –∏ –í–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n'–í–µc –†–æ—Å—Ç –í–æ–∑—Ä–∞—Å—Ç'"
            self.assertEqual(m, text)
        except:
            self.assertFalse(True)
    def test_4(self):
        try:
            client.send_message('@calories_counter_bot', '100 100 100')
            time.sleep(2)
            for message in client.get_messages('@calories_counter_bot'):
                m = message.message
            text = "–ö–∞–∫–æ–π –ø–æ–ª? - –ú/–ñ"
            self.assertEqual(m, text)
        except:
            self.assertFalse(True)
    def test_5(self):
        try:
            client.send_message('@calories_counter_bot', '–ñ')
            time.sleep(2)
            for message in client.get_messages('@calories_counter_bot'):
                m = message.message
            text = "–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: 1247.6"
            self.assertEqual(m, text)
        except:
            self.assertFalse(True)
    def test_6(self):
        try:
            client.send_message('@calories_counter_bot', '–†–æ–ª–ª')
            time.sleep(2)
            for message in client.get_messages('@calories_counter_bot'):
                m = message.message
            text = "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
            self.assertEqual(m, text)
        except:
            self.assertFalse(True)
    def test_7(self):
        try:
            client.send_message('@calories_counter_bot', '–†–æ–ª–ª ¬´–°–∏–º—Ñ–æ–Ω–∏—è¬ª —Å –∫—Ä–µ–≤–µ—Ç–∫–æ–π')
            time.sleep(2)
            for message in client.get_messages('@calories_counter_bot'):
                m = message.message
            text = "–†–æ–ª–ª ¬´–°–∏–º—Ñ–æ–Ω–∏—è¬ª —Å –∫—Ä–µ–≤–µ—Ç–∫–æ–π\n–ù–∞ 100 –≥—Ä–∞–º–º: \n–±–µ–ª–∫–∏ 6,5 –≥;  –∂–∏—Ä—ã 10,1 –≥;  —É–≥–ª–µ–≤–æ–¥—ã 17,2 –≥;  185,7 –∫–∫–∞–ª;"
            self.assertEqual(m, text)
        except:
            self.assertFalse(True)