import telebot
import config
import sqlite3

from telebot import types

"""
–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∏—Ç–æ–≥–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ "–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ".
–ë–æ—Ç —Å–æ–∑–¥–∞–Ω:
—Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã –ë–ò–ë215
–ö–∞—Ä–∏–º–æ–≤—ã–º –ö–∞—Ä–∏–º–æ–º 
–ß–∏–Ω—è–µ–≤–æ–π –ê–ª–∏–Ω–æ–π

–§—É–Ω–∫—Ü–∏—è welcome; –§—É–Ω–∫—Ü–∏—è funcs; –§—É–Ω–∫—Ü–∏—è get_parms; –§—É–Ω–∫—Ü–∏—è product_name; –§—É–Ω–∫—Ü–∏—è router; –§—É–Ω–∫—Ü–∏—è callback_inline - –ö–∞—Ä–∏–º–æ–≤ –ö–∞—Ä–∏–º 
–§–∞–π–ª sql_database.py; –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "project.db"; –§–∞–π–ª—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –ø–∞–ø–∫–µ "parcers"; –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π; –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ö–∞—Ä–∞—Ç–∫–µ—Ä–∏—Å—Ç–∏–∫  - –ß–∏–Ω—è–µ–≤–∞ –ê–ª–∏–Ω–∞

–î–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:

"""

bot = telebot.TeleBot(config.TOKEN)
connect = sqlite3.connect("project.db", check_same_thread=False)
cursor = connect.cursor()

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
m = 0
w = 0

@bot.message_handler(commands=['start'])
def welcome(message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ—Ç–∞, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""
    welc = open('welc.webp', 'rb')
    bot.send_sticker(message.chat.id, welc)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ —á–∞—Ç–µ
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π üçî")
    item2 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç")

    markup.add(item1, item2)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏, –∞ —Ç–∞–∫–∂–µ —Ç—É—Ç –µ—â—ë –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –ø–ª—é—à–µ–∫!".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)
    bot.send_message(message.chat.id, "–°–∫–∞–∂–∏, –∫–∞–∫—É—é –ø—Ä–µ—Å–ª–µ–¥—É–µ—à—å —Ü–µ–ª—å?")

@bot.message_handler(content_types=['text'])
def funcs(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
       —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω —É–∑–Ω–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏–ª–∏ –≤—ã—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞,
       –ø—Ä–∏ —Ç–æ–º –∏–ª–∏ –∏–Ω–æ–º –≤—ã–±–æ—Ä–µ, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
       """
    if message.chat.type == 'private':
        if message.text == "–£–∑–Ω–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π üçî":

            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –í–µ—Å, –†–æ—Å—Ç –∏ –í–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n'–í–µc –†–æ—Å—Ç –í–æ–∑—Ä–∞—Å—Ç'")
            bot.register_next_step_handler(message, get_parms)

        elif message.text == '–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç':
            bot.send_message(message.chat.id,'–í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, "–ê–≤–æ–∫–∞–¥–æ":')
            bot.register_next_step_handler(message, find)
        else:
            bot.send_message(message.chat.id,'–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å.')

def get_parms(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞—Å—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Ä–∞—Å—á—ë—Ç"""
    global m,w
    arr = []
    data = message.text + " "
    ind = -1
    for i in range(len(data)):
        if data[i] == " ":
            arr.append(int(data[ind + 1:i]))
            ind = i

    # –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –º—É–∂—á–∏–Ω
    m = 88.36 + 13.4 * arr[0] + 4.8 * arr[1] - 5.7 * arr[2]

    # –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∂–µ–Ω—â–∏–Ω
    w = 447.6 + 9.2 * arr[0] + 3.1 * arr[1] - 4.3 * arr[2]

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    InlKey = types.InlineKeyboardMarkup(row_width=2)
    man = types.InlineKeyboardButton("–ú", callback_data='male')
    woman = types.InlineKeyboardButton("–ñ", callback_data='female')

    InlKey.add(man, woman)

    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –ø–æ–ª? - –ú/–ñ", reply_markup=InlKey)

def router(message):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    vocabulary = {'–ù–∞–∑–∞–¥': welcome, '–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç' : product_name }
    vocabulary[message.text](message)

def product_name(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–∏—Å–∫—É –ª—é–±–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, "–ê–≤–æ–∫–∞–¥–æ":')
    bot.register_next_step_handler(message, find)

def find(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ "name" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ "products".
    –í–æ–∑–≤—Ä–∞—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞.
    """
    text = message.text
    cursor.execute("SELECT * FROM products WHERE name LIKE '%'||?||'%'", (text,))
    ans = cursor.fetchall()

    if len(ans) == 0:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç",)
        item2 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item,item2)
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≤–æ —É –Ω–∞—Å –Ω–µ –≤–æ–¥–∏—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑', reply_markup=markup)
        bot.register_next_step_handler(message, router)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i, r in enumerate(ans):
            item = types.KeyboardButton(r[2])
            markup.add(item)
        bot.send_message(message.chat.id, "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
        bot.register_next_step_handler(message, output)

def output(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö(—Å—Ç–æ–ª–±–µ—Ü "energy") –ø–æ–∑–∏—Ü–∏–π —Å—Ç–æ–ª–±—Ü–∞ "name" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ "products"."""
    text = message.text
    cursor.execute("SELECT energy FROM products WHERE name=?", (text,))
    ans = cursor.fetchone()
    out = text + "\n–ù–∞ 100 –≥—Ä–∞–º–º: \n" + str(ans)[2:-3]
    bot.send_message(message.chat.id, out,reply_markup=None)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç", )
    item2 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(item, item2)
    bot.send_message(message.chat.id, '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=markup)
    bot.register_next_step_handler(message, router)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∫–∞–ª–æ—Ä–∏–π"""
    try:
        if call.message:
            if call.data == 'male':
                bot.send_message(call.message.chat.id, "–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –º—É–∂—á–∏–Ω—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: " + str(m))
            elif call.data == 'female':
                bot.send_message(call.message.chat.id, "–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: " + str(w))

            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ö–∞–∫–æ–π –ø–æ–ª? - –ú/–ñ",
                reply_markup=None)

    except Exception as e:
        print(repr(e))
# RUN
bot.polling(none_stop=True)