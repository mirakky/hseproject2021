import telebot
import config
import sqlite3

from telebot import types

"""
–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∏—Ç–æ–≥–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ "–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ".
–ë–æ—Ç —Å–æ–∑–¥–∞–Ω:
—Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã –ë–ò–ë215
–ö–∞—Ä–∏–º–æ–≤—ã–º –ö–∞—Ä–∏–º–æ–º 
–ß–∏–Ω—è–µ–≤–æ–π –ê–ª–∏–Ω–æ–π

... - –ö–∞—Ä–∏–º–æ–≤ –ö–∞—Ä–∏–º 
–§–∞–π–ª sql_database.py; –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "project.db"; –§–∞–π–ª—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –ø–∞–ø–∫–µ "parcers"; –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π; –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ö–∞—Ä–∞—Ç–∫–µ—Ä–∏—Å—Ç–∏–∫  - –ß–∏–Ω—è–µ–≤–∞ –ê–ª–∏–Ω–∞

–î–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:
"""

bot = telebot.TeleBot(config.TOKEN)
connect = sqlite3.connect("project.db", check_same_thread=False)
cursor = connect.cursor()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@bot.message_handler(commands=['start'])
def welcome(message):
    welc = open('welc.webp', 'rb')
    bot.send_sticker(message.chat.id, welc)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ —á–∞—Ç–µ
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å üçî")
    item2 = types.KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å ü•í")
    item3 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç")

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏, –∞ —Ç–∞–∫–∂–µ —Ç—É—Ç –µ—â—ë –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –ø–ª—é—à–µ–∫!".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)
    bot.send_message(message.chat.id, "–°–∫–∞–∂–∏, –∫–∞–∫—É—é –ø—Ä–µ—Å–ª–µ–¥—É–µ—à—å —Ü–µ–ª—å?")

@bot.message_handler(content_types=['text'])
def funcs(message):
    if message.chat.type == 'private':
        if message.text == "–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å üçî" or message.text == "–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å ü•í" :

            # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            InlKey = types.InlineKeyboardMarkup(row_width=2)
            man = types.InlineKeyboardButton("–ú", callback_data='male')
            woman = types.InlineKeyboardButton("–ñ", callback_data='female')

            InlKey.add(man, woman)

            bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –ø–æ–ª? - –ú/–ñ", reply_markup=InlKey)

        elif message.text == '–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç':
            bot.send_message(message.chat.id,'–í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, "–ê–≤–æ–∫–∞–¥–æ":')
            bot.register_next_step_handler(message, find)
        else:
            bot.send_message(message.chat.id,'–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å.')

# –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ "name" –≤ —Ç–∞–±–ª–∏—Ü–µ "products"

def router(message):
    vocabulary = {'–ù–∞–∑–∞–¥': welcome, '–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç' : product_name }
    vocabulary[message.text](message)

def product_name(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, "–ê–≤–æ–∫–∞–¥–æ":')
    bot.register_next_step_handler(message, find)

def find(message):
    text = message.text
    #print(cursor.execute("SELECT category FROM products WHERE category=?", (text,)))
    cursor.execute("SELECT * FROM products WHERE name LIKE '%'||?||'%'", (text,))
    ans = cursor.fetchall()
    #print(len(ans))
    if len(ans) == 0:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç",)
        item2 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item,item2)
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≤–æ —É –Ω–∞—Å –Ω–µ –≤–æ–¥–∏—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑', reply_markup=markup)
        bot.register_next_step_handler(message, router)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i, r in enumerate(ans):
            item = types.KeyboardButton(r[2])
            markup.add(item)
        bot.send_message(message.chat.id, "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
        bot.register_next_step_handler(message, output)

# –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö(—Å—Ç–æ–ª–±–µ—Ü "energy") –ø–æ–∑–∏—Ü–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ "name" –≤ —Ç–∞–±–ª–∏—Ü–µ "products"
def output(message):
    text = message.text
    cursor.execute("SELECT energy FROM products WHERE name=?", (text,))
    ans = cursor.fetchone()
    out = text + "\n–ù–∞ 100 –≥—Ä–∞–º–º: \n" + str(ans)[2:-3]
    bot.send_message(message.chat.id, out,reply_markup=None)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å üëç", )
    item2 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(item, item2)
    bot.send_message(message.chat.id, '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=markup)
    bot.register_next_step_handler(message, router)

# –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –º—É–∂—á–∏–Ω
def menform(message):
    arr = []
    data = message.text
    bot.message_handler(data, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –í–µ—Å, –†–æ—Å—Ç –∏ –í–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–í–µc –†–æ—Å—Ç –í–æ–∑—Ä–∞—Å—Ç'")
    ind = -1
    for i in range(len(data)):
        if data[i] == " ":
            arr.append(data[ind + 1:i])
            ind = i
    menform = 88.36 + 13.4 * arr[0] + 4.8 * arr[1] - 5.7 * arr[2]
    return menform
# –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã
def womform(message):
    arr = []
    data = message.text
    bot.message_handler(data, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –í–µ—Å, –†–æ—Å—Ç –∏ –í–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–í–µc –†–æ—Å—Ç –í–æ–∑—Ä–∞—Å—Ç'")
    ind = -1
    for i in range(len(str(data))):
        if data[i] == " ":
            arr.append(data[ind + 1:i])
            ind = i
    womform = 447.6 + 9.2 * arr[0] + 3.1 * arr[1] - 4.3 * arr[2]
    return womform

# –§-—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'male':
                bot.send_message(call.message.chat.id, "–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –º—É–∂—á–∏–Ω—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: " + menform)
            elif call.data == 'female':
                bot.send_message(call.message.chat.id, "–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: " + womform)

            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ö–∞–∫–æ–π –ø–æ–ª? - –ú/–ñ",
                reply_markup=None)

    except Exception as e:
        print(repr(e))
# RUN
bot.polling(none_stop=True)
